security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\User:
            algorithm: auto
    encoders:
        # an encoder used in the past for some users
        legacy:
            algorithm: sha256
            encode_as_base64: false
            iterations: 3
        App\Entity\User:
            # the new encoder, along with its options
            algorithm: sodium
            migrate_from:
                - bcrypt # uses the "bcrypt" encoder with the default options
                - legacy # uses the "legacy" encoder configured above


    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginCustomAuthenticator
            logout:
                path: app_logout
                target: /
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/cable/, roles: [ROLE_CELLAR,ROLE_MANAGER] }
         - { path: ^/tool, roles: [ROLE_CELLAR,ROLE_MANAGER] }
         - { path: ^/material, roles: [ROLE_CELLAR,ROLE_MANAGER] }

         - { path: ^/addprojects, roles: [ ROLE_PROJECT_MANAGER,ROLE_MANAGER ] }
         - { path: ^/client, roles: [ ROLE_PROJECT_MANAGER,ROLE_MANAGER ] }
         - { path: ^/counter, roles: [ ROLE_COUNTER,ROLE_MANAGER ] }
         - { path: ^/homepage, roles: [ ROLE_CELLAR,ROLE_PROJECT_MANAGER,ROLE_COUNTER,ROLE_WORKERS,ROLE_MANAGER ] }
         - { path: ^/movement, roles: [ ROLE_CELLAR,ROLE_PROJECT_MANAGER,ROLE_MANAGER ] }

         - { path: ^/project/close, roles: [ ROLE_COUNTER,ROLE_MANAGER ] }
         - { path: ^/project, roles: [ ROLE_PROJECT_MANAGER,ROLE_COUNTER,ROLE_MANAGER ] }
         - { path: ^/task, roles: [ ROLE_PROJECT_MANAGER,ROLE_MANAGER ] }
         - { path: ^/user, roles: [ ROLE_MANAGER ] }
